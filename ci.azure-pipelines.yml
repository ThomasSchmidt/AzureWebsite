name: 'CI'

trigger:
- master
- feature/*

pool:
  vmImage: 'ubuntu-18.04'
  # vmImage: 'windows-latest'

variables:
  solution: '**/*.sln'
  buildPlatform: 'Any CPU'
  buildConfiguration: 'Release'
  webArtifactName: 'azure-website'
  # enables debug output
  # system.debug: true

stages:
- stage: 'stage_unittest'
  displayName: 'run unit tests'
  jobs:
  - job: 'test'
    steps:
    - task: UseDotNet@2
      displayName: 'Use .net 5.0 sdk'
      name: 'use_sdk'
      inputs:
        version: '5.0.x'
        packageType: 'sdk'

    - task: DotNetCoreCLI@2
      displayName: 'restore packages'
      name: 'restore_packages'
      inputs:
        command: 'restore'

    - task: DotNetCoreCLI@2
      displayName: 'run unit tests'
      name: 'run_tests'
      inputs:
        command: test
        arguments: '-c $(buildConfiguration) --logger trx --filter Category=unittest --results-directory $(Pipeline.Workspace)/TestResults/unittest/ --collect:"XPlat Code Coverage"'
        publishTestResults: false
        #arguments: '-c $(buildConfiguration) --logger trx --filter Category=unittest --collect:"XPlat Code Coverage"'
        projects: '$(solution)'

    - task: PowerShell@2
      displayName: 'list workspace'
      name: 'list_workspace_unittest'
      inputs:
        targetType: 'inline'
        script: |
          # Write your PowerShell commands here.
          Get-ChildItem $(Pipeline.Workspace)/TestResults/ -File -Recurse

    #- task: PublishCodeCoverageResults@1
    #  inputs:
    #    codeCoverageTool: 'Cobertura'
    #    #summaryFileLocation: '$(Agent.TempDirectory)/**/coverage.cobertura.xml'
    #    summaryFileLocation: '$(Pipeline.Workspace)/TestResults/unittest/*/*.cobertura.xml'

    - task: PublishTestResults@2
      inputs:
        testResultsFormat: 'VSTest' # Options: JUnit, NUnit, VSTest, xUnit, cTest
        testResultsFiles: '**/*.trx' 
        searchFolder: '$(Pipeline.Workspace)/TestResults/unittest/' # Optional
        mergeTestResults: true # Optional
        #failTaskOnFailedTests: false # Optional
        #testRunTitle: # Optional
        #buildPlatform: # Optional
        #buildConfiguration: # Optional
        #publishRunAttachments: true # Optional
    
    - task: PublishPipelineArtifact@1
      name: 'publish_unittest_artifacts'
      displayName: 'Publish unit test coverage artifact'
      inputs:
        artifact: 'unittest_coverage_artifact'
        targetPath: '$(Pipeline.Workspace)/TestResults/unittest/'

- stage: 'stage_integrationtests'
  displayName: 'run integration tests'
  # dependsOn:
  # - 'stage_build'
  jobs:
  - job: 'test'
    steps:
    #- checkout: none
    
    #- task: DownloadPipelineArtifact@2
    #  inputs:
    #    buildType: 'current'
    #    artifactName: 'build_artifact'
    #    targetPath: '$(Pipeline.Workspace)/buildartifact'

    #- task: PowerShell@2
    #  displayName: 'list workspace'
    #  name: 'list_workspace_buildartifact'
    #  inputs:
    #    targetType: 'inline'
    #    script: |
    #      # Write your PowerShell commands here.
    #      ls $(Pipeline.Workspace)/buildartifact

    - task: UseDotNet@2
      displayName: 'Use .net 5.0 sdk'
      name: 'use_sdk'
      inputs:
        version: '5.0.x'
        packageType: 'sdk'

    - task: DotNetCoreCLI@2
      displayName: 'run integration tests'
      name: 'run_tests'
      inputs:
        command: test
        arguments: '-c $(buildConfiguration) --logger trx --filter Category=integrationtest --results-directory $(Pipeline.Workspace)/TestResults/integrationtest/ --collect:"XPlat Code Coverage"'
        publishTestResults: false
        #arguments: '-c $(buildConfiguration) --logger trx --filter Category=integrationtest --results-directory $(Pipeline.Workspace)/TestResults/integrationtest/ --collect:"XPlat Code Coverage"'
        projects: '$(solution)'

    - task: PowerShell@2
      displayName: 'list workspace'
      name: 'list_workspace_integrationtest'
      inputs:
        targetType: 'inline'
        script: |
          # Write your PowerShell commands here.
          Get-ChildItem $(Pipeline.Workspace)/TestResults/ -File -Recurse

    #- task: PublishPipelineArtifact@1
    #  displayName: 'publish code coverage'
    #  name: 'publish_coverage_file'
    #  inputs:
    #    artifact: 'coveragexmlartifact'
    #    targetPath: '$(Agent.TempDirectory)/'

    #- task: PublishCodeCoverageResults@1
    #  inputs:
    #    codeCoverageTool: 'Cobertura'
    #    #summaryFileLocation: '$(Agent.TempDirectory)/**/coverage.cobertura.xml'
    #    summaryFileLocation: '$(Pipeline.Workspace)/TestResults/integrationtest/*/*.cobertura.xml'

    - task: PublishTestResults@2
      inputs:
        testResultsFormat: 'VSTest' # Options: JUnit, NUnit, VSTest, xUnit, cTest
        testResultsFiles: '**/*.trx' 
        searchFolder: '$(Pipeline.Workspace)/TestResults/integrationtest/' # Optional
        mergeTestResults: true # Optional

    - task: PublishPipelineArtifact@1
      name: 'publish_integrationtest_artifacts'
      displayName: 'Publish unit test coverage artifact'
      inputs:
        artifact: 'integrationtest_coverage_artifact'
        targetPath: '$(Pipeline.Workspace)/TestResults/integrationtest/'

- stage: 'stage_publish_codecoverage'
  displayName: 'publish codecoverage reports'
  # dependsOn:
  # - 'stage_build'
  jobs:
  - job: 'publish'
    steps:
    
    - task: DownloadPipelineArtifact@2
      name: 'download_unittest_coverage_artifact'
      displayName: 'download unittest coverage'
      inputs:
        buildType: 'current'
        artifactName: 'unittest_coverage_artifact'
        targetPath: '$(Pipeline.Workspace)/TestResults/unittest/'

    - task: DownloadPipelineArtifact@2
      name: 'download_integrationtest_coverage_artifact'
      displayName: 'download integrationtest coverage'
      inputs:
        buildType: 'current'
        artifactName: 'integrationtest_coverage_artifact'
        targetPath: '$(Pipeline.Workspace)/TestResults/integrationtest/'

    #Merging code coverage reports into a full Cobertura report
    - task: reportgenerator@4
      name: "generate_report"
      displayName: "Generate code coverage report"
      inputs:
        reports: '$(Pipeline.Workspace)/TestResults/unittest/*/*.cobertura.xml;$(Pipeline.Workspace)/TestResults/integrationtest/*/*.cobertura.xml'
        targetdir: '$(Pipeline.Workspace)/TestResults/coverage/'
        reporttypes: "HtmlInline_AzurePipelines;Cobertura"

    - task: PowerShell@2
      displayName: 'list workspace'
      name: 'list_workspace_coverage'
      inputs:
        targetType: 'inline'
        script: |
          # Write your PowerShell commands here.
          Get-ChildItem $(Pipeline.Workspace)/TestResults/coverage/ -File -Recurse

    - task: PublishCodeCoverageResults@1
      name: 'publish_coverage_report'
      displayName: 'publish coverage report'
      inputs:
        codeCoverageTool: 'Cobertura'
        #summaryFileLocation: '$(Agent.TempDirectory)/**/coverage.cobertura.xml'
        summaryFileLocation: '$(Pipeline.Workspace)/TestResults/coverage/*.xml'
        #reportDirectory: '$(Pipeline.Workspace)/TestResults/coverage/'
